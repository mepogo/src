
/*
 * ProjectApp.java
 *
 *
 */
package projecttester;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.Vector;

import javax.swing.table.DefaultTableModel;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/**
 *
 * @author Poonam
 */
public class ProjectApp extends javax.swing.JFrame {

	/** Creates new form ProjectApp */
	private ThreadController controller;

	static ArrayList<String> values = new ArrayList<String>();
	startsocket sc;
	ThreadController tc;
	CrawlerThread ct;
	HtmlDoc parserobject = null;
	double result = 0.0;

	public ProjectApp() {
		initComponents();
		sc = new startsocket(this);
		tc = new ThreadController(this);
		ct = new CrawlerThread(this);
		jProgressBar1.setVisible(false);
		jTextField1.setVisible(false);
		jTextField2.setVisible(false);
		jTextField3.setVisible(false);
		jTextField4.setVisible(false);
		jLabel2.setVisible(false);
		jLabel3.setVisible(false);
		jLabel4.setVisible(false);
		jLabel5.setVisible(false);
		jLabel6.setVisible(false);
		jButton7.setVisible(false);
	}

	class ProgressBarThread extends Thread {

		public void run() {
			while (!controller.processOver()) {
				jProgressBar1.setVisible(true);
			}
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jTabbedPane1 = new javax.swing.JTabbedPane();
		jPanel1 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jTextField1 = new javax.swing.JTextField();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTable1 = new javax.swing.JTable();
		jButton1 = new javax.swing.JButton();
		jTextArea1 = new javax.swing.JTextArea();
		jTextArea2 = new javax.swing.JTextArea();
		jTextArea3 = new javax.swing.JTextArea();
		jLabel3 = new javax.swing.JLabel();
		jTextField2 = new javax.swing.JTextField();
		jPanel2 = new javax.swing.JPanel();
		jLabel4 = new javax.swing.JLabel();
		jComboBox1 = new javax.swing.JComboBox();
		jLabel5 = new javax.swing.JLabel();
		jTextField3 = new javax.swing.JTextField();
		jLabel6 = new javax.swing.JLabel();
		jTextField4 = new javax.swing.JTextField();
		jScrollPane2 = new javax.swing.JScrollPane();
		jScrollPane3 = new javax.swing.JScrollPane();
		jTable2 = new javax.swing.JTable();
		jButton2 = new javax.swing.JButton();
		jButton7 = new javax.swing.JButton();
		jPanel4 = new javax.swing.JPanel();
		jButton3 = new javax.swing.JButton();
		jButton4 = new javax.swing.JButton();
		jPanel3 = new javax.swing.JPanel();
		jProgressBar1 = new javax.swing.JProgressBar();
		jLabel2 = new javax.swing.JLabel();
		jLabel8 = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Relevance Mapping of Wikipedia Edits");

		jTabbedPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

		jLabel1.setText("URLs from hatnote socket");

		jTable1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
		jTable1.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {

		}, new String[] { "URLs Scanned", "Processed By" }));
		jTextArea1.setColumns(20);
		jTextArea1.setRows(5);
		jScrollPane1.setViewportView(jTextArea1);

		jButton1.setText("Search");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		// jLabel3.setText("Specify Threads");

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addGap(61, 61, 61)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addComponent(jLabel3).addComponent(jLabel1))
						.addGap(18, 18, 18)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(jTextField2).addComponent(jTextField1,
										javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE))
						.addGap(49, 49, 49))
				.addGroup(jPanel1Layout.createSequentialGroup().addGap(267, 267, 267).addComponent(jButton1)
						.addContainerGap(548, Short.MAX_VALUE))
				.addGroup(jPanel1Layout.createSequentialGroup().addContainerGap()
						.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 860, Short.MAX_VALUE)
						.addContainerGap()));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addContainerGap()
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jLabel1))
						.addGap(28, 28, 28)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel3).addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(35, 35, 35)
						.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jButton1)
						.addContainerGap()));

		jTabbedPane1.addTab("Edits URL", jPanel1);

		// jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[]
		// { "Security", "Cars" }));

		jComboBox1.setVisible(false);
		jLabel5.setText("Search Keyword");

		jLabel6.setText("Enter No of Threads");

		jTable2.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {

		}, new String[] { "Editted Text" }));
		jTextArea2.setColumns(20);
		jTextArea2.setRows(5);
		jScrollPane2.setViewportView(jTextArea2);

		jButton2.setText("Fetch Edits");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout
				.setHorizontalGroup(
						jPanel2Layout
								.createParallelGroup(
										javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jPanel2Layout.createSequentialGroup().addGroup(jPanel2Layout
										.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(jPanel2Layout.createSequentialGroup().addContainerGap()
												.addGroup(jPanel2Layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
														.addComponent(jLabel6).addComponent(jLabel5)
														.addComponent(jLabel4))
												.addGap(18, 18, 18)
												.addGroup(jPanel2Layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,
																false)
														.addComponent(jTextField4).addComponent(jTextField3)
														.addComponent(jComboBox1, 0, 254, Short.MAX_VALUE)))
										.addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING,
												javax.swing.GroupLayout.DEFAULT_SIZE, 870, Short.MAX_VALUE)
										.addGroup(jPanel2Layout.createSequentialGroup().addGap(387, 387, 387)
												.addComponent(jButton2).addGap(18, 18, 18).addComponent(jButton7)))
										.addContainerGap()));
		jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup().addContainerGap()
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel4).addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel5).addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel6).addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
						.addGap(18, 18, 18)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jButton2).addComponent(jButton7))
						.addContainerGap()));

		jTabbedPane1.addTab("Edit Diff", jPanel2);

		jTextArea3.setColumns(20);
		jTextArea3.setRows(5);
		jScrollPane3.setViewportView(jTextArea3);

		jButton3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton3ActionPerformed(evt);
			}
		});

		jButton4.setText("Cars");
		jButton4.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton4ActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
		jPanel4.setLayout(jPanel4Layout);
		jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)

				.addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 870,
						javax.swing.GroupLayout.PREFERRED_SIZE)

		);
		jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)

				.addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 870,
						javax.swing.GroupLayout.PREFERRED_SIZE));

		jTabbedPane1.addTab("Relevancy", jPanel4);

		jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

		jProgressBar1.setIndeterminate(true);

		javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
		jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
						.addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addGroup(jPanel3Layout.createSequentialGroup().addContainerGap().addComponent(jLabel2)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 719,
												Short.MAX_VALUE))
								.addGroup(jPanel3Layout.createSequentialGroup().addContainerGap().addComponent(jLabel8)
										.addGap(18, 18, 18)))
						.addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap()));
		jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel3Layout.createSequentialGroup().addGap(6, 6, 6).addGroup(jPanel3Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabel2)
						.addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addComponent(jLabel8).addComponent(jProgressBar1,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.LEADING,
										javax.swing.GroupLayout.DEFAULT_SIZE, 889, Short.MAX_VALUE)
								.addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE))
						.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				javax.swing.GroupLayout.Alignment.TRAILING,
				layout.createSequentialGroup().addContainerGap()
						.addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 715, Short.MAX_VALUE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap()));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton3ActionPerformed
		// TODO add your handling code here:
		String a[] = { "Security.png", "Security OWL" };
		// new NavigableImagePanel().initiate(a);
	}// GEN-LAST:event_jButton3ActionPerformed

	private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton7ActionPerformed
		// TODO add your handling code here:
		DefaultTableModel tm = new DefaultTableModel();

		tm.addColumn("Edits");
		// tm.addColumn("Dissalowed by robots.txt");
		controller.sortResult(tm);
		jTable2.setModel(tm);
	}// GEN-LAST:event_jButton7ActionPerformed

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton2ActionPerformed
		// TODO add your handling code here:

		// new Thread(new Runnable() {
		// public void run() {
		// values = sc.startsocketwiki();
		// start(values);
		//
		// }
		// }).start();

	}

	/*
	 * try { activateOntology = true; DefaultTableModel tm = new
	 * DefaultTableModel(); tm.addColumn("URLs Discovered"); //
	 * tm.addColumn("Dissalowed by robots.txt"); tm.addColumn("Processed By");
	 * tm.addColumn("Weight"); String ontologySelected = "" +
	 * jComboBox1.getSelectedItem(); Vector<URL> urls = new Vector<URL>(0, 1);
	 * String h[] = jTextField3.getText().split(" "); String h1 = ""; for (int i
	 * = 0; i < h.length; i++) { if (i != h.length - 1) { h1 += h[i] + "%20"; }
	 * else { h1 += h[i]; } } String s1 =
	 * "http://www.google.co.in/search?query=" + h1; URL ur = new URL(s1);
	 * URLConnection con = ur.openConnection();
	 * con.addRequestProperty("User-Agent",
	 * "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)"); con.connect();
	 * BufferedReader br = new BufferedReader(new
	 * InputStreamReader(con.getInputStream())); String s12 = "", s = ""; while
	 * ((s12 = br.readLine()) != null) { s += s12; } Document doc =
	 * Jsoup.parse(s); // System.out.println(doc.html()); Elements anchorLinks =
	 * doc.getElementsByTag("a"); System.out.println(anchorLinks.size()); //
	 * urls.add(new //
	 * URL("http://en.wikipedia.org/wiki/"+jTextField3.getText().toLowerCase()))
	 * ; // urls.add(new //
	 * URL("http://searchsecurity.techtarget.com/definition/"+jTextField3.
	 * getText().toLowerCase())); for (int i = 0; i < anchorLinks.size(); i++) {
	 * if (urls.size() >= Integer.parseInt(jTextField4.getText())) break; try {
	 * String sf = anchorLinks.get(i + 25).attr("href"); if (sf.indexOf("?q=")
	 * != -1) { sf = sf.substring(sf.indexOf("?q=") + 3); } sf = sf.substring(0,
	 * sf.indexOf("&")); if (!urls.contains(new URL(sf))) urls.add(new URL(sf));
	 * } catch (Exception e) { // e.printStackTrace(); continue; }
	 * 
	 * } for (int i = 0; i < urls.size(); i++) { System.out.println("" +
	 * urls.get(i)); } // System.exit(0);
	 * 
	 * if (ontologySelected.equalsIgnoreCase("security")) { if
	 * (jTextField3.getText().equalsIgnoreCase("authentication")) { urls.add(new
	 * URL("http://en.wikipedia.org/wiki/authentication")); //urls.add(new URL(
	 * "http://searchsecurity.techtarget.com/definition/authentication") );
	 * //urls.add(new URL("http://www.rsa.com/glossary/default.asp?id=1006")); }
	 * else if (jTextField3.getText().equalsIgnoreCase("Virus")) { urls.add(new
	 * URL("http://en.wikipedia.org/wiki/Virus")); //urls.add(new
	 * URL("http://searchsecurity.techtarget.com/definition/virus"));
	 * urls.add(new URL("http://www.webopedia.com/TERM/V/virus.html")); } else
	 * if (jTextField3.getText().equalsIgnoreCase("vulnerability")) {
	 * urls.add(new
	 * URL("http://en.wikipedia.org/wiki/Vulnerability_(computing)")); }
	 * 
	 * //urls.add(new URL("http://docs.moodle.org/22/en/Authentication"));
	 * //urls.add(new URL(
	 * "http://www.mongodb.org/display/DOCS/Security+and+Authentication" ));
	 * 
	 * }
	 * 
	 * controller = new
	 * ThreadController(Integer.parseInt(jTextField4.getText()), urls, tm,
	 * jTextField3.getText(), ontologySelected);
	 * 
	 * controller.start(); jTable2.setModel(tm); if (controller.over) {
	 * System.out.println("TATA"); } } catch (Exception e) {
	 * e.printStackTrace(); }
	 */ // GEN-LAST:event_jButton2ActionPerformed

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
		// TODO add your handling code here:

		try {

			DefaultTableModel tm = new DefaultTableModel();
			tm.addColumn("URLs Discovered");
			// tm.addColumn("Dissalowed by robots.txt");
			// tm.addColumn("Processed BY:");
			new Thread(new Runnable() {
				public void run() {
					values = sc.startsocketwiki();
					start(values);

				}
			}).start();

			// controller = new ThreadController(30, new
			// URL("http://www.google.com"), tm);

			// controller.start();
			jTable1.setModel(tm);
			// if (controller.over) {
			// System.out.println("TATA");
			// }
		} catch (Exception e) {
			e.printStackTrace();
		}
	}// GEN-LAST:event_jButton1ActionPerformed

	private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton4ActionPerformed
		// TODO add your handling code here:

		String a[] = { "Cars.png", "Car OWL" };
		// new NavigableImagePanel().initiate(a);
	}// GEN-LAST:event_jButton4ActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {

			public void run() {
				new ProjectApp().setVisible(true);
			}
		});
	}

	public void start(final ArrayList<String> lst) {
		// val = sc.getsocketlist();
		fetchEdits(lst);
	}

	public void fetchEdits(ArrayList<String> lst) {

		for (int i = 0; i < lst.size(); i++) {
			final String exet = lst.get(i);
			try {
				BufferedWriter bw = new BufferedWriter(new FileWriter("/Users/poonamgohil/Desktop/Relevance2.txt",true));
				
				jTextArea3.setText("Wikipedia URL crawled: " + lst);
				String content = "" + exet + "\n";
				bw.write(content);
				bw.close();
				System.out.println("In Start------------------");
				//executes(exet);
				if (i == lst.size() - 1) {

					// jLabel9.setText("click crawl button again");
				}

			} catch (Exception e) {

				System.out.println(e.toString());
			}
		}

	}

	void executes(String lst) {

		parserobject = new HtmlDoc(lst);
		String title = parserobject.Title();
		Elements del = parserobject.metadata("del.diffchange.diffchange-inline");
		Elements ins = parserobject.metadata("ins.diffchange.diffchange-inline");
		Elements links = parserobject.metadata("a.external.text");
		Elements freeurl = parserobject.metadata("a.external.free");
		Elements edittedTitle = parserobject.metadata("a.external.text");
		Elements DoneedittedTitle = parserobject.metadata("div#mw-diff-ntitle3");
		Element body = parserobject.body();
		Elements metacontent = parserobject.metadata("meta[name=description]");
		// jLabel5.setText(title);

		// jTextArea1.setText(linksfortextbox);
		String delText = "Editted Title :\n" + edittedTitle.text() + "\n";
		for (Element t : del) {

			delText += t.text() + "\n";

		}


		// jTextArea5.setText(delText);
		String textadd = "Url: " + lst + "\nTitle: " + title + "\n" + "Edits: " + ins + "\n";
		Stopwords stp = new Stopwords();
		ArrayList<String> searchwords = new ArrayList<>();
		System.out.println("In execute :)----------------------");
		jTextArea2.setText(textadd);
		String text = "";
		int count = 0;
		try {
			activateOntology = true;
			DefaultTableModel tm = new DefaultTableModel();
			Vector<URL> urls = new Vector<URL>(0, 1);

			String[] splitTitle = title.split(":");
			String temp = splitTitle[0] + " ";
			String change = "";
			for (Element newchange : ins) {
				change += newchange.text() + " ";

			}

			if (!change.trim().equals("")) {
				text = Stopwords.removeStopWords(change);
				if (!text.equals("")) {
					searchwords.add(text);
					temp += text;
					count++;
				}

			}

			System.out.println("Temp : -----------------" + temp);
		
			//if ((count > 5)) {
				String h1 = "";
				if (!text.equals("")) {
					if (!temp.equalsIgnoreCase(splitTitle[0] + " ")) {
						String h[] = temp.split(" ");
						for (int i = 0; i < h.length; i++) {
							if (i != h.length - 1) {
								h1 += h[i] + "%20";
							} else {
								h1 += h[i];
							}
						}
					}

				}

				Set<URL> result = getDataFromGoogle(h1);
				for (URL url : result) {
					urls.add(url);
					// System.out.println(url);

				}

				controller = new ThreadController(10, urls, tm, temp, "dbpedia", splitTitle[0]);

				controller.start();

				if (controller.over) {
					System.out.println("TATA");
				}
			//}
			/*else{
				BufferedWriter bw1 = new BufferedWriter(new FileWriter("/Users/poonamgohil/Desktop/Relevance.txt",true));
				String content2 = "Edit too minor to crawl!";
				bw1.write(content2);
				bw1.close();
			}*/
		} catch (Exception e) {
			e.printStackTrace();

		}

	}
	
	
	

	private Set<URL> getDataFromGoogle(String query) {

		Set<URL> result = new HashSet<URL>();
		String request = "https://www.google.com/search?q=" + query + "&num=20";
		System.out.println("Sending request..." + request);

		try {

			// need http protocol, set this as a Google bot agent :)
	

					
			Document doc = Jsoup.connect(request)
					.userAgent("Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)").timeout(5000)
					.get();

			// get all links
			Elements links = doc.select("a[href]");
			for (Element link : links) {

				String temp = link.attr("href");
				if (temp.startsWith("/url?q=")) {
					String[] split = temp.split("=");
					if (split[1].startsWith("http") || split[1].startsWith("https")) {
						result.add(new URL(split[1]));
					}
				}

			}

		} catch (IOException e) {
			e.printStackTrace();
		}

		return result;
	}

	private InputStream openConnectionCheckRedirects(URLConnection c) throws IOException {
		boolean redir;
		int redirects = 0;
		InputStream in = null;
		do {
			if (c instanceof HttpURLConnection) {
				((HttpURLConnection) c).setInstanceFollowRedirects(false);
			}
			// We want to open the input stream before getting headers
			// because getHeaderField() et al swallow IOExceptions.
			in = c.getInputStream();
			redir = false;
			if (c instanceof HttpURLConnection) {
				HttpURLConnection http = (HttpURLConnection) c;
				int stat = http.getResponseCode();
				if (stat >= 300 && stat <= 307 && stat != 306 && stat != HttpURLConnection.HTTP_NOT_MODIFIED) {
					URL base = http.getURL();
					String loc = http.getHeaderField("Location");
					URL target = null;
					if (loc != null) {
						target = new URL(base, loc);
					}
					http.disconnect();
					// Redirection should be allowed only for HTTP and HTTPS
					// and should be limited to 5 redirections at most.
					if (target == null || !(target.getProtocol().equals("http") || target.getProtocol().equals("https"))
							|| redirects >= 5) {
						throw new SecurityException("illegal URL redirect");
					}
					redir = true;
					c = target.openConnection();
					c.addRequestProperty("User-Agent",
							"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) AppleWebKit/602.3.12 (KHTML, like Gecko) Version/10.0.2 Safari/602.3.12");

					redirects++;
				}
			}
		} while (redir);
		return in;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JButton jButton3;
	private javax.swing.JButton jButton4;
	private javax.swing.JButton jButton7;
	public static javax.swing.JComboBox jComboBox1;
	private javax.swing.JLabel jLabel1;
	public static javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	public static javax.swing.JLabel jLabel8;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	public static javax.swing.JProgressBar jProgressBar1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JTabbedPane jTabbedPane1;
	private javax.swing.JTable jTable1;
	private javax.swing.JTable jTable2;
	private javax.swing.JTextField jTextField1;
	private javax.swing.JTextField jTextField2;
	private javax.swing.JTextField jTextField3;
	private javax.swing.JTextField jTextField4;
	javax.swing.JTextArea jTextArea1;
	javax.swing.JTextArea jTextArea2;
	javax.swing.JTextArea jTextArea3;
	// End of variables declaration//GEN-END:variables
	public static boolean activateOntology = false;
}
